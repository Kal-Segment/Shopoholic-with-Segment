{"ast":null,"code":"import R from \"ramda\";\nexport const getPhonesById = (state, id) => R.prop(id, state.phone);\nexport const getActiveCategoryId = ownProps => {\n  // console.log(\"ownProps \" , ownProps);\n  return R.path([\"params\", \"id\"], ownProps);\n};\nexport const getPhones = (state, ownProps) => {\n  // const phones = R.map(id=>getPhonesById(state,id),state.PhonesPage.ids);\n  // return phones;\n  const activeCategoryId = getActiveCategoryId(ownProps); // console.log(\"activeCategoryId \" , activeCategoryId);\n\n  const applyCategory = item => {\n    // console.log(\"Item \", item);\n    return R.equals(activeCategoryId, R.prop(\"categoryId\", item));\n  };\n\n  const applySearch = item => {\n    return R.contains(state.PhonesPage.search, R.prop(\"name\", item));\n  };\n\n  const phones = R.compose(R.filter(applySearch), R.when(R.always(activeCategoryId), R.filter(applyCategory)), R.map(id => getPhonesById(state, id)))(state.PhonesPage.ids);\n  return phones;\n};\nexport const getRenderedPhonesLength = state => R.length(state.PhonesPage.ids);\nexport const getTotalBasketPrice = state => {\n  const phones = R.map(id => getPhonesById(state, id), state.Basket);\n  let total = 0;\n  return phones.reduce((total, phone) => {\n    return Math.round((total + phone.price) * state.Coupon.invertedDiscount * 100) / 100;\n  }, total);\n};\nexport const getTotalBasketCount = state => {\n  return state.Basket.length;\n};\nexport const getCategories = state => {\n  // console.log(\" fething categories from state \" ,R.values(state.Categories));\n  return R.values(state.Categories);\n};\nexport const getBasketPhonesWithCount = state => {\n  const uniqueIds = R.uniq(state.Basket);\n\n  const phoneCount = id => {\n    return R.compose(R.length, R.filter(basketId => R.equals(id, basketId)))(state.Basket);\n  };\n\n  const phoneWithCount = phone => {\n    return R.assoc(\"count\", phoneCount(phone.id), phone);\n  };\n\n  const phones = R.compose(R.map(phoneWithCount), R.map(id => getPhonesById(state, id)))(uniqueIds);\n  console.log(\"Phones in basket are \", phones);\n  return phones;\n};","map":{"version":3,"sources":["/Users/kal.kolacahill/Shopoholic WebApp/src/selectors/Phones.js"],"names":["R","getPhonesById","state","id","prop","phone","getActiveCategoryId","ownProps","path","getPhones","activeCategoryId","applyCategory","item","equals","applySearch","contains","PhonesPage","search","phones","compose","filter","when","always","map","ids","getRenderedPhonesLength","length","getTotalBasketPrice","Basket","total","reduce","Math","round","price","Coupon","invertedDiscount","getTotalBasketCount","getCategories","values","Categories","getBasketPhonesWithCount","uniqueIds","uniq","phoneCount","basketId","phoneWithCount","assoc","console","log"],"mappings":"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","sourcesContent":["import R from \"ramda\";\r\n\r\nexport const getPhonesById = (state, id) => R.prop(id, state.phone);\r\n\r\nexport const getActiveCategoryId = (ownProps) => {\r\n  // console.log(\"ownProps \" , ownProps);\r\n  return R.path([\"params\", \"id\"], ownProps);\r\n};\r\n\r\nexport const getPhones = (state, ownProps) => {\r\n  // const phones = R.map(id=>getPhonesById(state,id),state.PhonesPage.ids);\r\n  // return phones;\r\n\r\n  const activeCategoryId = getActiveCategoryId(ownProps);\r\n  // console.log(\"activeCategoryId \" , activeCategoryId);\r\n  const applyCategory = (item) => {\r\n    // console.log(\"Item \", item);\r\n    return R.equals(activeCategoryId, R.prop(\"categoryId\", item));\r\n  };\r\n  const applySearch = (item) => {\r\n    return R.contains(state.PhonesPage.search, R.prop(\"name\", item));\r\n  };\r\n  const phones = R.compose(\r\n    R.filter(applySearch),\r\n    R.when(R.always(activeCategoryId), R.filter(applyCategory)),\r\n    R.map((id) => getPhonesById(state, id))\r\n  )(state.PhonesPage.ids);\r\n  return phones;\r\n};\r\n\r\nexport const getRenderedPhonesLength = (state) =>\r\n  R.length(state.PhonesPage.ids);\r\n\r\nexport const getTotalBasketPrice = (state) => {\r\n  const phones = R.map((id) => getPhonesById(state, id), state.Basket);\r\n  let total = 0;\r\n  return phones.reduce((total, phone) => {\r\n    return (\r\n      Math.round((total + phone.price) * state.Coupon.invertedDiscount * 100) /\r\n      100\r\n    );\r\n  }, total);\r\n};\r\n\r\nexport const getTotalBasketCount = (state) => {\r\n  return state.Basket.length;\r\n};\r\n\r\nexport const getCategories = (state) => {\r\n  // console.log(\" fething categories from state \" ,R.values(state.Categories));\r\n  return R.values(state.Categories);\r\n};\r\n\r\nexport const getBasketPhonesWithCount = (state) => {\r\n  const uniqueIds = R.uniq(state.Basket);\r\n\r\n  const phoneCount = (id) => {\r\n    return R.compose(\r\n      R.length,\r\n      R.filter((basketId) => R.equals(id, basketId))\r\n    )(state.Basket);\r\n  };\r\n  const phoneWithCount = (phone) => {\r\n    return R.assoc(\"count\", phoneCount(phone.id), phone);\r\n  };\r\n  const phones = R.compose(\r\n    R.map(phoneWithCount),\r\n    R.map((id) => getPhonesById(state, id))\r\n  )(uniqueIds);\r\n  console.log(\"Phones in basket are \", phones);\r\n  return phones;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}